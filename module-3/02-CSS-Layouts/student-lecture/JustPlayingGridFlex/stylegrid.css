:root {
  --color1: yellow;
  --color2: lightblue;
}

* {
  font-family: Tahoma, Verdana, Segoe, sans-serif;
  box-sizing: border-box;
}

html {
  font-size: 16px;
}

body {
  /* Make it a grid container */
  display: grid;

  /* There will be 5 columns in the grid */
  grid-template-columns: 100px 1fr 2fr 1fr 100px;

  /* Name the areas, so we can "place" sections into these areas later. */
  grid-template-areas:
    " . one one one . "
    ". two . three ."
    ". two four four ."
    ". two five five  ."
    ". six . . ."
    ". seven seven seven .";

    /* Aligns left-to-right */
    /* justify-items: center; */

    /* Aligns top-to-bottom. Compare flex-start, flex-end, center, stretch. */
    align-items: stretch;

  /* Set a gap for rows and columns. Use grid-row-gap and grid-column-gap to set them differently*/
  /* grid-gap: 15px; */
  /* grid-row-gap: 10px; */
}

section {
  border: 1px solid darkblue;
  padding: 5px;
}

#section1 {
  /* 
  Assign each section to an area.
  There are other ways to use grid. we could have declared a grid-template-columns (above), and then each
  of these sections can be assigned to grid-row-start, grid-row-end, grid-column-start, grid-column-end. 
   */
  grid-area: one;
  background-color: var(--color1);
}

#section2 {
  grid-area: two;
  background-color: var(--color2);

  /* To vertically center the text inside the grid cell */
  /* display: flex;
  flex-direction: column-reverse;
  justify-content: center; */
}

#section3 {
  grid-area: three;
  background-color: var(--color1);
}

#section4 {
  grid-area: four;
  background-color: var(--color2);
}

#section5 {
  grid-area: five;
  background-color: var(--color1);
}

#section6 {
  grid-area: six;
  background-color: var(--color2);
}

#section7 {
  grid-area: seven;
  background-color: var(--color1);
}
